<?xml version="1.0"?>
<command xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:type="AuditHostScriptCommand" id="urn:uuid:1b2698b9-f6ea-44b6-bf7b-a405aafac437">
  <input>
    <type>application/vnd.mandiant.host+xml</type>
  </input>
  <result>
    <type>application/vnd.mandiant.auditresult+xml</type>
  </result>
  <script id="urn:uuid:1b2698b9-f6ea-44b6-bf7b-a405aafac437" chaining="implicit">
    <commands>
      <command xsi:type="ExecuteModuleCommand" id="urn:uuid:c781c7d8-d99e-45a2-bfa1-918dfee1837f">
        <module name="w32scripting-persistence" version="1.4.0.0" />
        <config xsi:type="ParameterListModuleConfig">
          <parameters>
            <param name="Prevent Hibernation">
              <value xsi:type="xsd:boolean">false</value>
            </param>
            <param name="Preserve Times">
              <value xsi:type="xsd:boolean">true</value>
            </param>
            <param name="MD5">
              <value xsi:type="xsd:boolean">true</value>
            </param>
            <param name="SHA1">
              <value xsi:type="xsd:boolean">false</value>
            </param>
            <param name="SHA256">
              <value xsi:type="xsd:boolean">false</value>
            </param>
            <param name="Analyze Entropy">
              <value xsi:type="xsd:boolean">false</value>
            </param>
            <param name="Analyze Imports">
              <value xsi:type="xsd:boolean">false</value>
            </param>
            <param name="Analyze Exports">
              <value xsi:type="xsd:boolean">false</value>
            </param>
            <param name="Analyze File Anomalies">
              <value xsi:type="xsd:boolean">false</value>
            </param>
            <param name="Scan Entry Point Distance">
              <value xsi:type="xsd:int">0</value>
            </param>
            <param name="Verify Digital Signatures">
              <value xsi:type="xsd:boolean">true</value>
            </param>
            <param name="Get Resources">
              <value xsi:type="xsd:boolean">false</value>
            </param>
            <param name="Get Version Info">
              <value xsi:type="xsd:boolean">false</value>
            </param>
            <param name="lua_script">
              <value xsi:type="xsd:string"></value>
            </param>
          </parameters>
        </config>
      </command>
    </commands>
  </script>
</command>
